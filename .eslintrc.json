{
    "root": true,

    // Parser is babel because we use some experimental features
    //(like arrow functions in classes: babel uses the transform-class-properties babel plugin to transform them into auto bound class methods)
    "parser": "babel-eslint",

    "parserOptions": {
        "ecmaVersion": 2020,
        "sourceType": "module",
        "ecmaFeatures": {
            "jsx": true
        }
    },

    "settings": {
        "import/extensions": [".js", ".jsx"],
        "import/resolver": {
            "node": {
                "moduleDirectory": ["node_modules", "src/"]
            }
        }
    },

    "env": {
        "browser": true,
        "es2020": true
    },

    "globals": {
        "cy": "readonly",
        "Cypress": "readonly"
    },

    "plugins": ["react", "import"],

    "extends": [
        "eslint:recommended",
        "airbnb",
        "react-app",
        "plugin:react/recommended",
        "plugin:import/errors",
        "plugin:import/warnings"
    ],

    "rules": {
        // Possible errors
        "comma-dangle": ["error", {
            "arrays": "always-multiline",
            "objects": "always-multiline",
            "imports": "always-multiline",
            "exports": "always-multiline",
            "functions": "ignore"
        }],
        "no-console": ["warn", {
            "allow": ["warn", "error"]
        }],
        "no-debugger": "error",
        "no-extra-semi": "error",
        "no-extra-parens": ["error", "functions"],

        // Strict mode: "use strict"" directive not allowed,
        // since we are using es6 modules, it"s strict mode by default
        "strict": ["error", "never"],

        // Best practices
        "eqeqeq": "error",
        "no-new": "error",
        "no-eval": "error",
        "curly": "error",
        "no-alert": "error",
        "no-unused-expressions": "error",
        "no-else-return": "error",
        "no-warning-comments": "off",
        "no-fallthrough": "error",
        "no-case-declarations": "off",

        // Complexity
        "complexity": ["error", 11],
        "max-depth": ["error", 4],
        "max-params": ["error", 5],
        "max-statements": ["error", 50],
        "max-lines": ["error", 300],
        "max-lines-per-function": ["error", {"max": 100, "skipComments": true}],

        // Variables
        "no-undef": "error",
        "no-unused-vars": ["error", {
            "vars": "all",
            "args": "after-used"
        }],
        "no-use-before-define": ["error", {
            "functions": false,
            "classes": false
        }],

        // Stylistic issues
        "no-array-constructor": "error",
        "no-mixed-spaces-and-tabs": "error",
        "new-cap": ["error", {
            "newIsCap": true,
            "capIsNew": true,
            "capIsNewExceptions": ["Router"]
        }],
        "semi": "error",
        "quotes": ["error", "single", {
            "avoidEscape": true,
            "allowTemplateLiterals": true
        }],
        "quote-props": ["error", "as-needed"],
        "indent": ["error", 4, {
            "ignoredNodes": ["JSXAttribute"],
            "SwitchCase": 1
        }],
        "no-trailing-spaces": "error",
        "space-before-function-paren": ["error", {
            "anonymous": "always",
            "named": "never"
        }],
        "space-in-parens": ["error", "never"],
        "yoda": ["error", "never"],
        "spaced-comment": ["error", "always"],
        "max-len": ["error", 160, 2],
        "object-curly-spacing": ["error", "always"],
        "object-curly-newline": ["error", {"consistent": true}],
        "comma-spacing": ["error", { "before": false, "after": true }],
        "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
        "jsx-quotes": ["error", "prefer-double"],
        "function-paren-newline": ["error", "consistent"],
        "prefer-object-spread": "warn",
        "padded-blocks": ["error", {"blocks": "never"}],
        "operator-linebreak": ["error", "after"],
        "linebreak-style": "off",
        "no-plusplus": "off",

        // ES6
        // es6 possible errors / best practices
        "no-duplicate-imports": "error",
        "no-useless-computed-key": "error",
        "no-useless-rename": "error",
        "no-var": "error",
        "prefer-const": "error",
        "no-param-reassign": "warn",

        // es6 stylistic issues
        "arrow-spacing": "error",
        "rest-spread-spacing": ["error", "never"],
        "template-curly-spacing": "error",
        "arrow-parens": ["error", "always"],

        // es6 preferences
        "object-shorthand": "error",
        "prefer-destructuring": ["error", {
            "array": true,
            "object": true
        }],
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",

        // **********
        // PLUGINS
        // **********

        // REACT
        "react/prop-types": "error",
        "react/forbid-prop-types": ["error", {
            "forbid": ["any", "object", "array"]
        }],
        "react/jsx-no-duplicate-props": "error",
        "react/jsx-filename-extension": ["error", { "extensions": [".js", ".jsx"] }],
        "react/jsx-indent": "off", // clashes with eslint indent
        "react/jsx-indent-props": ["error", 4],
        "react/jsx-wrap-multilines": ["error", {
            "declaration": "parens",
            "assignment": "parens",
            "return": "parens",
            "arrow": "parens",
            "condition": "ignore",
            "logical": "ignore",
            "prop": "ignore"
        }],

        "react/jsx-max-props-per-line": ["error", { "maximum": 1 }],
        "react/static-property-placement": ["error", "static public field"],
        "react/destructuring-assignment": "off",
        "react/jsx-props-no-spreading": "off",
        "react/no-did-update-set-state": "off",
        "react/jsx-curly-newline": "off",

        // IMPORT
        // static analysis
        "import/no-unresolved": "error",
        "import/named": "error",
        "import/default": "error",
        // helpful errorings
        "import/export": "error",
        // style guide
        "import/first": "error",
        "import/no-duplicates": "error",
        "import/extensions": ["error", "never", { "ignorePackages": true }],
        "import/order": ["error", {
            "newlines-between": "always",
            "groups": ["builtin", "external", "internal", "parent", "sibling", "index"]
        }],
        "import/newline-after-import": "error",
        "import/no-extraneous-dependencies": ["error", {"devDependencies": true}],
        "import/prefer-default-export": "off",
        "import/no-cycle": "error"
    }
}
